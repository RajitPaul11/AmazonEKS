apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: demo-eks-cluster
  region: ap-south-1
  version: "1.22"

vpc:
  subnets:
    public:
      app-subnet-1a: { id: subnet-01fcc669 }
      app-subnet-1b: { id: subnet-8c1972c0 }
      app-subnet-1c: { id: subnet-4ff24f34 }
      db-subnet-1a: { id: subnet-0962bb74deaa100fa }
      db-subnet-1b: { id: subnet-0c6fa53061d8b0383 }

managedNodeGroups:
  - name: public-app-ng-1
    ami: ami-082aa21c804c9d0e5
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh demo-eks-cluster --container-runtime containerd
    instanceType: t3.large
    minSize: 1
    maxSize: 1
    desiredCapacity: 1
    volumeSize: 20
    volumeEncrypted: true
    volumeType: gp3
    subnets:
      - app-subnet-1a
      - app-subnet-1b
      - app-subnet-1c
    labels: {role: app}
    ssh:
      publicKeyName: DevopsDiscussion
    tags:
      Env: Dev
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true

  - name: private-db-ng-1
    ami: ami-082aa21c804c9d0e5
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh demo-eks-cluster --container-runtime containerd
    instanceType: t3.medium
    minSize: 1
    maxSize: 1
    desiredCapacity: 1
    volumeSize: 20
    volumeEncrypted: true
    volumeType: gp3
    subnets:
      - db-subnet-1a
      - db-subnet-1b
    labels: {role: db}
    ssh:
      publicKeyName: DevopsDiscussion
    tags:
      Env: Dev
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true
  
  - name: public-app-ng-2
    ami: ami-082aa21c804c9d0e5
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh demo-eks-cluster --container-runtime containerd
    instanceType: t3.small
    minSize: 1
    maxSize: 1
    desiredCapacity: 1
    volumeSize: 20
    volumeEncrypted: true
    volumeType: gp3
    subnets:
      - app-subnet-1a
      - app-subnet-1b
      - app-subnet-1c
    labels: {role: app-1}
    ssh:
      publicKeyName: DevopsDiscussion
    tags:
      Env: Dev
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true

  - name: private-db-ng-2
    ami: ami-082aa21c804c9d0e5
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh demo-eks-cluster --container-runtime containerd
    instanceType: t3.small
    minSize: 1
    maxSize: 1
    desiredCapacity: 1
    volumeSize: 20
    volumeEncrypted: true
    volumeType: gp3
    subnets:
      - db-subnet-1a
      - db-subnet-1b
    labels: {role: db-1}
    ssh:
      publicKeyName: DevopsDiscussion
    tags:
      Env: Dev
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true